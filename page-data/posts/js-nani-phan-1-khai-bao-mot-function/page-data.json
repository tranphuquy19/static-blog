{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/js-nani-phan-1-khai-bao-mot-function","result":{"data":{"markdownRemark":{"id":"7cbbdeee-e48e-559c-a0b4-37a0d8fced9d","html":"<p><img src=\"/media/js-nani-1.jpg\" alt=\"JS Function\"></p>\n<p>Khai báo Function trong JavaScript dẫu rằng đơn giản nhưng bạn đã biết hết chưa? Sau đây là một số kiểu khai báo trong JavaScript sẽ khiến bạn ngạc nhiên!</p>\n<h2 id=\"1-function-declaration\" style=\"position:relative;\"><a href=\"#1-function-declaration\" aria-label=\"1 function declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Function declaration</h2>\n<deckgo-highlight-code language=\"javascript\"  line-numbers=\"true\" editable=\"true\" >\n          <code slot=\"code\">function add(a, b) {\n  return a + b;\n}\nadd(1, 2); // 3</code>\n        </deckgo-highlight-code>\n<p>Đây là kiểu khai báo đơn giản nhất mà bạn chắc chắn sẽ biết. Đây là một loại <em><strong>Function mỳ ăn liền</strong></em> - gọi là chạy!</p>\n<h2 id=\"2-function-expression\" style=\"position:relative;\"><a href=\"#2-function-expression\" aria-label=\"2 function expression permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Function expression</h2>\n<deckgo-highlight-code language=\"javascript\"  line-numbers=\"true\" editable=\"true\" >\n          <code slot=\"code\">let add = function (a, b) {\n  return a + b;\n}\nadd(1, 2) // 3</code>\n        </deckgo-highlight-code>\n<p>Cũng là một kiểu khai báo function thường thấy trong JavaScript. Tuy nhiên, bạn chỉ sử dụng được khi đã khai báo nó</p>\n<h2 id=\"3-iife-viết-tắt-của-immediately-invoked-function-expression\" style=\"position:relative;\"><a href=\"#3-iife-vi%E1%BA%BFt-t%E1%BA%AFt-c%E1%BB%A7a-immediately-invoked-function-expression\" aria-label=\"3 iife viết tắt của immediately invoked function expression permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. IIFE (viết tắt của Immediately-invoked function expression)</h2>\n<deckgo-highlight-code language=\"javascript\"  line-numbers=\"true\" editable=\"true\" >\n          <code slot=\"code\">(function(a, b) {\n  return a + b;\n})(1, 2) // 3</code>\n        </deckgo-highlight-code>\n<p>Cái này mới đúng không?? Đây là cách để định nghĩa <code class=\"language-text\">anonymous function</code> (mấy thằng phía trên nhân gian gọi là <code class=\"language-text\">named function</code>)</p>\n<p>Nhìn chung, IIFE rất dễ khai báo. Nó bao gồm 2 dấu ()(), <strong>()  thứ nhất</strong> sẽ chứa phần thân function, <strong>() thứ hai</strong> sẽ chứa các parameters để truyền vào function bên trong dấu <strong>() thứ nhất</strong></p>\n<p>Câu hỏi là: để làm gì zậy ba??? Bạn sẽ cần đến IIFE trong một số trường hợp sau đây:</p>\n<ul>\n<li>Dùng nó trong trường hợp nấu mì ăn liền, thực thi code trong function một cách tự động (<em>nghĩa là ưng chạy cái gì thì cứ bọc nó trong IIFE</em>)! Bạn thử đoán 2 đoạn code sau nó sẽ ra cái gì nhé!</li>\n</ul>\n<deckgo-highlight-code language=\"javascript\"  line-numbers=\"true\" editable=\"true\" >\n          <code slot=\"code\">// Một trong những câu hỏi của Google và Amazon áp dụng khi tuyển nhân sự\nconst arr = [1, 2, 3, 4];\nfor (var i = 0; i &lt; arr.length; i++) {\n  setTimeout(function() {\n    console.log(i);\n  }, 3000)\n} // output sẽ là gì??\n\n// 2\nconst arr = [1, 2, 3, 4];\nfor (var i = 0; i &lt; arr.length; i++) {\n  (function (i) {\n    setTimeout(function() {\n       console.log(i);\n    }, 3000)\n  })(i)\n} // output sẽ là gì??</code>\n        </deckgo-highlight-code>\n<ul>\n<li>Giảm thiểu memory leak! Mọi biến trong IIFE sẽ được GC (garbage collection) dọn khi ra khỏi scope của nó. </li>\n</ul>\n<blockquote>\n<p>Để giúp các bạn hiểu rõ hơn thì memory leak là hiện tượng rò rỉ bộ nhớ khi thực thi chương trình, các vùng nhớ bị rò rỉ sẽ thất thoát và không được giải phóng cho các chương trình khác sử dụng</p>\n</blockquote>\n<h2 id=\"4-closure-function\" style=\"position:relative;\"><a href=\"#4-closure-function\" aria-label=\"4 closure function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Closure function</h2>\n<p>Lang thang đâu đó trong đống code JS trên Github bạn sẽ gặp dòng code sau đây:</p>\n<deckgo-highlight-code language=\"javascript\"  line-numbers=\"true\" editable=\"true\" >\n          <code slot=\"code\">const a = add(1, 2)();\n// Hoặc ghê hơn\nconst b = add(1, 2)()();</code>\n        </deckgo-highlight-code>\n<p>Bạn sẽ thốt lên <em>“wtf!! Cái gì đây?”</em>  Thực ra nó là 1 <strong>inner function</strong> nằm trong một function khác (gọi là <strong>outer function</strong>). Trong trường hợp này <strong>outer function</strong> return về một <strong>inner function</strong>, và để function này chạy được bạn phải thêm cặp dấu <strong>()</strong>. Theo dõi đoạn code sau đây bạn sẽ hiểu:</p>\n<deckgo-highlight-code language=\"javascript\"  line-numbers=\"true\" editable=\"true\" >\n          <code slot=\"code\">function add(a, b) { // outer function\n  return function () { // inner function\n    return a + b;\n  }\n}\n\nadd(1, 2)(); // 3</code>\n        </deckgo-highlight-code>\n<h2 id=\"5-funcion-object\" style=\"position:relative;\"><a href=\"#5-funcion-object\" aria-label=\"5 funcion object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Funcion Object</h2>\n<p>Để kết thúc lại bài này mình xin giới thiệu thêm một cách khai báo cực kì thú vị của JS nữa là Function Object. Theo dõi đoạn code này nhé:</p>\n<deckgo-highlight-code language=\"javascript\"  line-numbers=\"true\" editable=\"true\" >\n          <code slot=\"code\">const fncBody = &quot;return a + b;&quot;;\nconst add = new Function([&#39;a&#39;, &#39;b&#39;], fncBody);\nadd(1, 2); // 3</code>\n        </deckgo-highlight-code>\n<p>Yayy!!! Nhìn qua thì cũng thường chứ có gì thú vị đâu đúng không?? Điều thú vị nằm ở chỗ nó có thể biến bất cứ String, Text hay JSON thành Function và thực thi chúng. Chúng ta có thể đặt một Function mã hóa nào đó trong Response trả về từ API chẳng hạn, ứng dụng là vô kể. Theo dõi tiếp nhé:</p>\n<deckgo-highlight-code language=\"javascript\"  line-numbers=\"true\" editable=\"true\" >\n          <code slot=\"code\">const sayHello100times = function() {\n  for(let i = 1; i &lt;= 100; i++) {\n    console.log(`Hello ${i}`);\n  }\n}\n// Convert đoạn Function trên thành String!\nconst fncBody = sayHello100times.toString().match(/function[^{]+\\{([\\s\\S]*)\\}$/)[1]; // thử console.log() thằng này ra xem\nconst sayHello = new Function([], fncBody);\nsayHello();</code>\n        </deckgo-highlight-code>\n<p>Đống code trên sẽ in ra 100 dòng <code class=\"language-text\">Hello</code>. Thật thú vị phải không nào. Function về String rồi lại về Function. Chúng ta có thể khởi tạo Function này trên máy chúng ta và gửi nó để thực thi ở một nơi nào đó trên Internet!</p>\n<p>Bài viết đến đây là kết thúc, hy vọng các kiến thức trên là bổ ích cho các bạn.</p>\n<p><img src=\"/media/thanks-for-watching.jpg\" alt=\"Thanks For Watching\"></p>","fields":{"slug":"/posts/js-nani-phan-1-khai-bao-mot-function","tagSlugs":["/tag/javascript/","/tag/nodejs/"]},"frontmatter":{"date":"2020-07-03T12:09:29.703Z","description":"Bạn đã biết hết cách khai báo một Function trong JS chưa? Sau đây là một số cách khai báo cũng như cách dùng sẽ khiến bạn ngạc nhiên..","tags":["javascript","nodejs"],"title":"JS nà ní [phần 1] 7749 Cách khai báo một Function!","socialImage":"/media/js-nani-1.png"}}},"pageContext":{"slug":"/posts/js-nani-phan-1-khai-bao-mot-function"}},"staticQueryHashes":["251939775","3032201271","401334301"]}